#include <set>
#include <unordered_map>
#include <algorithm>
using namespace std;

set<pair<int, int>> s;
unordered_map<int, int> mp, left, right;

int n, cnt;
void init(int N) {
	n = N;
	cnt = 0;
	s.clear();
	mp.clear();
	left.clear();
	right.clear();

	s.emplace(1 - n, 1);
	left[1] = n;
	right[n] = 1;
}

void del(int l, int r) {
	if (l > r) return;
	s.erase({ l - r, l });
	left[l] = 0;
	right[r] = n + 1;
}

void add(int l, int r) {
	if (l > r) return;
	s.emplace(l - r, l);
	left[l] = r;
	right[r] = l;
}

int arrive(int id) {
	auto t = s.begin();
	int l = t->second;
	int r = t->second - t->first;
	
	int x;
	if (l == 1) x = 1;
	else if (r == n) x = n;
	else x = (l + r) / 2;
	cnt++;
	del(l, r);
	add(l, x - 1);
	add(x + 1, r);
	mp[id] = x;
	return x;
}

int ql(int r) {
	auto t = right.find(r);
	if (t == right.end()) return n + 1;
	return right[r];
}

int qr(int l) {
	auto t = left.find(l);
	if (t == left.end()) return 0;
	return left[l];
}

int leave(int id) {
	int x = mp[id];
	int lr = x - 1, ll = ql(lr);
	int rl = x + 1, rr = qr(rl);
	del(ll, lr);
	del(rl, rr);
	add(min(ll, x), max(x, rr));
	cnt--;
	return n - cnt;
}
