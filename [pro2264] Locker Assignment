main.cpp
```cpp
#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>

extern void init(int N);
extern int arrive(int mId);
extern int leave(int mId);

/////////////////////////////////////////////////////////////////////////

#define CMD_INIT 1
#define CMD_ARRIVE 2
#define CMD_LEAVE 3

static bool run() {
    int q;
    scanf("%d", &q);

    int n, mid;
    int cmd, ans, ret = 0;
    bool okay = false;

    for (int i = 0; i < q; ++i) {
        scanf("%d", &cmd);
        switch (cmd) {
        case CMD_INIT:
            scanf("%d", &n);
            init(n);
            okay = true;
            break;
        case CMD_ARRIVE:
            scanf("%d %d", &mid, &ans);
            ret = arrive(mid);
            if (ans != ret)
                okay = false;
            break;
        case CMD_LEAVE:
            scanf("%d %d", &mid, &ans);
            ret = leave(mid);
            if (ans != ret)
                okay = false;
            break;
        default:
            okay = false;
            break;
        }
    }
    return okay;
}

int main() {
    setbuf(stdout, NULL);
    freopen("sample_input.txt", "r", stdin);

    int T, MARK;
    scanf("%d %d", &T, &MARK);

    for (int tc = 1; tc <= T; tc++) {
        int score = run() ? MARK : 0;
        printf("#%d %d\n", tc, score);
    }

    return 0;
}
```
user.cpp
```cpp
#include <set>
#include <unordered_map>
using namespace std;
using pii = pair<int, int>;

int n, m;
set<pii> s; //{left-right, left}
//set : 
//Store unique elements following a specific order.
//The value of the elements in a set cannot be modified once in the container (the elements are always const), but they can be inserted or removed from the container.
//

unordered_map<int, int> pos, lift, right;
//pos : id -> 储物柜index
//right : index -> left of index
//lift : index -> right of index


void init(int N) {
    n = N, m = 0;
    s.clear();
    pos.clear();
    lift.clear();
    right.clear();

    s.emplace(1 - n, 1);
    lift[1] = n;
    right[n] = 1;
}

void add(int l, int r) {
    if (r < l) return;
    s.emplace(l - r, l);
    lift[l] = r;
    right[r] = l;
}

void del(int l, int r) {
    if (r < l) return;
    s.erase({ l - r, l });
    lift[l] = 0;
    right[r] = n + 1;
}

void add(int x, int l, int r) { //arrive后，更新连续区间
    del(l, r);
    add(l, x - 1);
    add(x + 1, r);
}

int ql(int r) {
    auto it = right.find(r);
    if (it == right.end()) return n + 1;
    return right[r];
}

int qr(int l) {
    auto it = lift.find(l);
    if (it == lift.end()) return 0;
    return lift[l];
}

int arrive(int id) {
    auto it = s.begin();
    int l = it->second;
    int r = l - it->first;

    int x;
    if (l == 1) x = 1;
    else if (r == n) x = n;
    else x = (l + r) / 2;

    m++;
    pos[id] = x;
    add(x, l, r);
    return x;
}

int leave(int id) {
    int x = pos[id];
    int lr = x - 1, ll = ql(lr);
    int rl = x + 1, rr = qr(rl);

    m--;
    del(ll, lr);
    del(rl, rr);
    add(min(x, ll), max(x, rr));
    return n - m;
}
```


